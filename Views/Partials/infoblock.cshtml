@model Umbraco.Web.PublishedModels.Infoblock


@{
   var image = Model.Value<IPublishedContent>("image");
   var bgImage = Model.Value<IPublishedContent>("backgroundImage"); 
   var ParallaxBgClass = ""; 
   var ParallaxImageClass = "";   
   var ParallaxCaptionClass = "";  
}

@{
    if (@Model.ParallaxBgEnable.ToString() == "True") {
     ParallaxBgClass = "rellaxbg";  
    }
    if (@Model.ParallaxImageEnable.ToString() == "True") {
     ParallaxImageClass = "rellaximage";  
    }
    if (@Model.ParallaxCaptionEnable.ToString() == "True") {
     ParallaxCaptionClass = "rellaxcaption";  
    }
}

<div class="infoblock @Model.CustomClass vh-@Model.MinimumHeight @Model.InfoblockType" 
style="background-color: #@Model.BackgroundColor;
" 
>
    @{
        if (bgImage != null) {
            <div class="backgroundImage @ParallaxBgClass" style="background-image: url('@bgImage.Url')"></div>
        }     
    }
    <div class="content align-items-@Model.VerticalAlignment p-xs-@Model.BlockPaddingMobile p-sm-@Model.BlockPaddingTablet p-lg-@Model.BlockPaddingDesktop" 
    style="color: #@Model.ContentColor;"
    data-aos="@Model.BlockAnimation" 
    data-aos-offset="@Model.BlockAnimationOffset" 
    data-aos-easing="@Model.BlockAnimationEasing" 
    data-aos-duration="@Model.BlockAnimationDuration"
    data-aos-delay="@Model.BlockAnimationDelay"
    >
        <div class="container @Model.ContainerSize">
            <div class="row flow-@Model.ContentFlow valign-@Model.VerticalAlignment">
                @{
                    if (image != null) {
                    <div class="col-md-6">
                            <div class="image p-xs-2 p-sm-3 p-lg-5">
                                <img class="img-fluid @ParallaxImageClass" src="@image.Url" alt="@Model.ImageAltTag">
                            </div>
                    </div>
                    }
                }
                <div class="col-md-6">
                    <div class="caption p-xs-2 p-sm-3 p-lg-5 @ParallaxCaptionClass">
                        <h1> 
                            @Model.Title
                        </h1>
                        <span> 
                            @Html.Raw(Model.Description)
                        </span>
                    @{
                        if (Model.CallToAction.Any()) {
                            <div class="cta-wrapper">
                                @foreach (var callToActionLinks in Model.CallToAction.OfType<CallToActionComposition>()) {
                                    <a class="btn btn-@callToActionLinks.CallToActionStyle@callToActionLinks.CallToActionColor @callToActionLinks.CallToActionSize" href="@callToActionLinks.CallToActionLink.Url" target="@callToActionLinks.CallToActionLink.Target">@callToActionLinks.CallToActionLink.Name</a>
                                }
                            </div>
                        }
                    }
                    </div> 
                </div>
            </div>
        </div>
    </div>
</div>

<script>
//Parallax - Rellax
    var rellax = new Rellax('.rellaxbg', {
    speed: -10,
    center: false,
    wrapper: null,
    round: true,
    vertical: true,
    horizontal: false
    });
</script>

<script>
//Parallax - Rellax
    var rellax = new Rellax('.rellaximage', {
    speed: 5,
    center: false,
    wrapper: null,
    round: true,
    vertical: true,
    horizontal: false
    });
</script>

<script>
//Parallax - Rellax
    var rellax = new Rellax('.rellaxcaption', {
    speed: 5,
    center: false,
    wrapper: null,
    round: true,
    vertical: true,
    horizontal: false
    });
</script>