@model Umbraco.Web.PublishedModels.Infoblock


@{
   var image = Model.Value<IPublishedContent>("image");
   var bgImage = Model.Value<IPublishedContent>("backgroundImage"); 
   var ContainerSize = Model.Value<IPublishedContent>("containerSize"); 
   var ParallaxBgAttribute = ""; 
   var ParallaxImageAttribute = "";   
   var ParallaxCaptionAttribute = "";  
   var ParallaxBgClass = "";  
   var ParallaxImageClass = "";
   var ParallaxCaptionClass = "";
   var CardLayoutToggle="";
   var CardBodyClassToggle="";
   var CardFooterClassToggle="";  
   string BlockId = Guid.NewGuid().ToString().Split('-')[0];
}

@{
    if (@Model.ParallaxBgEnable.ToString() == "True") {
     ParallaxBgAttribute = @Model.ParallaxBgPreset.ToString(); 
     ParallaxBgClass = "lax";
    }
    if (@Model.ParallaxImageEnable.ToString() == "True") {
     ParallaxImageAttribute = @Model.ParallaxImagePreset.ToString(); 
     ParallaxImageClass = "lax";
    }
    if (@Model.ParallaxCaptionEnable.ToString() == "True") {
     ParallaxCaptionAttribute = @Model.ParallaxCaptionPreset.ToString(); 
     ParallaxCaptionClass = "lax"; 
    }
    if (@Model.CardLayout.ToString() == "True") {
     CardLayoutToggle = "card";
     CardBodyClassToggle = "card-body";
     CardFooterClassToggle = "card-footer";
    }
}

<div id="@Model.CustomId" class="contentblock infoblock infoblock-@BlockId @Model.CustomClass vh-@Model.MinimumHeight @Model.InfoblockType" 
style="background-color: #@Model.BackgroundColor;
" 
>
    @{
        if (bgImage != null) {
            <div class="backgroundImage @ParallaxBgClass" data-lax-preset="@ParallaxBgAttribute" data-lax-optimize data-lax-anchor="#@Model.CustomId" style="background-image: url('@bgImage.Url'); background-size:@Model.BackgroundSize; background-repeat:@Model.BackgroundRepeat; opacity:@Model.BackgroundOpacity;"></div>
        }     
    }
    <div class="content align-items-@Model.VerticalAlignment p-xs-@Model.BlockPaddingMobile p-sm-@Model.BlockPaddingTablet p-lg-@Model.BlockPaddingDesktop" 
    style="color: #@Model.ContentColor;"
    data-aos="@Model.BlockAnimation" 
    data-aos-offset="@Model.BlockAnimationOffset" 
    data-aos-easing="@Model.BlockAnimationEasing" 
    data-aos-duration="@Model.BlockAnimationDuration"
    data-aos-delay="@Model.BlockAnimationDelay"
    >
        <div class="container @ContainerSize">
            <div class="row flow-@Model.ContentFlow valign-@Model.VerticalAlignment">
                @{
                    if (image != null) {
                    <div class="col-xs-12 col-sm-12 col-md-5 col-lg-6">
                            <div class="image p-xs-5 p-sm-3 p-lg-5 @ParallaxImageClass" data-lax-preset="@ParallaxImageAttribute" style="text-align: @Model.ImageHorizontalAlignment;">
                                <img class="img-fluid" src="@image.Url" alt="@Model.ImageAltTag" style="max-width: @Model.ImageMaxWidth%;">
                            </div>
                    </div>
                    }
                }
                <div class="col-xs-12 col-sm-12 col-md-7 col-lg-6">
                    <div class="caption @CardLayoutToggle @ParallaxCaptionClass" data-lax-preset="@ParallaxCaptionAttribute">
                        <div class="caption-content p-xs-5 p-sm-3 p-lg-5 @{if(@Model.CardLayout.ToString() == "True") {@CardBodyClassToggle}}">
                            <h1 class="title"> 
                                @Model.Title
                            </h1>
                            <div class="description"> 
                                @Html.Raw(Model.Description)
                            </div>
                            @{
                                if (Model.CallToAction.Any()) {
                                    <div class="cta-wrapper @CardFooterClassToggle">
                                        @foreach (var callToActionLinks in Model.CallToAction.OfType<CallToActionComposition>()) {
                                            <a class="btn btn-@callToActionLinks.CallToActionStyle@callToActionLinks.CallToActionColor @callToActionLinks.CallToActionSize" href="@callToActionLinks.CallToActionLink.Url" target="@callToActionLinks.CallToActionLink.Target">@callToActionLinks.CallToActionLink.Name</a>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div> 
                </div>
            </div>
        </div>
    </div>
</div>









@* @if (@Model.ParallaxBgEnable.ToString() == "True") {
    <script type="text/javascript">
        var rellax = new Rellax('.rellaxbg', {
        speed: -10,
        center: false,
        wrapper: '.infoblock-@BlockId',
        relativeToWrapper: true,
        round: true,
        vertical: true,
        horizontal: false
        });
    </script>
}

@if (@Model.ParallaxImageEnable.ToString() == "True") {
    <script type="text/javascript">
        var rellax = new Rellax('.rellaximage', {
        speed: 5,
        center: false,
        wrapper: '.infoblock-@BlockId',
        relativeToWrapper: true,
        round: true,
        vertical: true,
        horizontal: false
        });
    </script>
}
@if (@Model.ParallaxCaptionEnable.ToString() == "True") {
    <script type="text/javascript">
        var rellax = new Rellax('.rellaxcaption', {
        speed: 5,
        center: false,
        wrapper: '.infoblock-@BlockId',
        relativeToWrapper: true,
        round: true,
        vertical: true,
        horizontal: false
        });
    </script>
}  *@